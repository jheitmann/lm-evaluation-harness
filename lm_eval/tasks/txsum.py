"""
TXSum
"""
import evaluate
import nltk
from lm_eval.base import rf, Task
from functools import partial


summarization_metric = evaluate.load("rouge")


def _txsum_metric(predictions, references, rouge_type=None):
    result = summarization_metric.compute(
        predictions=predictions,
        references=references,
        rouge_types=[rouge_type],
        use_stemmer=True,
    )[rouge_type]
    return result


def _txsum_agg(key, items):
    predictions, references = zip(*items)
    result = _txsum_metric(
        predictions=predictions, references=references, rouge_type=key
    )
    return result


class TXSum(Task):
    VERSION = None
    DATASET_PATH = "mtc/tx-summaries"
    DATASET_NAME = None
    PROMPT_INSTRUCTION = "Artikel:"
    PROMPT_END = "Zusammenfassung:"
    MAX_LENGTH = 153
    LANGUAGE = "german"

    def has_training_docs(self):
        return True

    def has_validation_docs(self):
        return True

    def has_test_docs(self):
        return True

    def training_docs(self):
        return self.dataset["train"]

    def validation_docs(self):
        return self.dataset["validation"]

    def test_docs(self):
        return self.dataset["test"]

    def doc_to_text(self, doc):
        return self.PROMPT_INSTRUCTION + " " + doc["article"] + "\n\n" + self.PROMPT_END

    def doc_to_target(self, doc):
        summary = doc["highlights"]
        return " " + summary

    def fewshot_examples_old(self, k, rnd):
        if self._training_docs is None:
            self._training_docs = list(self.training_docs())
        return rnd.sample(self._training_docs, k)

    def construct_requests(self, doc, ctx):
        """Uses RequestFactory to construct Requests and returns an iterable of
        Requests which will be sent to the LM.

        :param doc:
            The document as returned from training_docs, validation_docs, or test_docs.
        :param ctx: str
            The context string, generated by fewshot_context. This includes the natural
            language description, as well as the few shot examples, and the question
            part of the document for `doc`.
        """
        continuation = rf.greedy_until(
            ctx, {"until": [], "max_length": self.MAX_LENGTH}
        )
        return continuation

    def postprocess_text(self, prediction, reference):
        prediction = prediction.strip()
        reference = reference.strip()

        # rougeLSum expects newline after each sentence
        prediction = "\n".join(nltk.sent_tokenize(prediction, language=self.LANGUAGE))
        reference = "\n".join(nltk.sent_tokenize(reference, language=self.LANGUAGE))

        return prediction, reference

    def process_results(self, doc, results):
        """Take a single document and the LM results and evaluates, returning a
        dict where keys are the names of submetrics and values are the values of
        the metric for that one document

        :param doc:
            The document as returned from training_docs, validation_docs, or test_docs.
        :param results:
            The results of the requests created in construct_requests.
        """
        assert len(results) == 1

        prediction, reference = self.postprocess_text(results[0], doc["highlights"])

        return {
            "rouge1": (prediction, reference),
            "rouge2": (prediction, reference),
            "rougeL": (prediction, reference),
        }

    def aggregation(self):
        """
        :returns: {str: [float] -> float}
            A dictionary where keys are the names of submetrics and values are
            functions that aggregate a list of metrics
        """
        return {
            "rouge1": partial(_txsum_agg, "rouge1"),
            "rouge2": partial(_txsum_agg, "rouge2"),
            "rougeL": partial(_txsum_agg, "rougeL"),
        }

    def higher_is_better(self):
        """
        :returns: {str: bool}
            A dictionary where keys are the names of submetrics and values are
            whether a higher value of the submetric is better
        """
        return {"rouge1": True, "rouge2": True, "rougeL": True}
